/*******************************************************************
 * File:     testborder
 * Purpose:  Testing that the border routine works
 * Author:   Justin Fletcher
 * Date:     08 Nov 2002
 ******************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "graphics.h"
#include "borders.h"
#include "swis.h"

#define X0 128
#define Y0 128
#define HEIGHT 96
#define WIDTH  128

/* Standard heights of the icons for different border types */
int heights[] = {
    40,     // regular icon
    52,     // raised (not recommended)
    52,     // lowered (informationals)
    52,     // ridge (group, not recommended)
    52,     // channel (group)
    52,     // action (pressable button)
    52+16,  // default (pressable button)
    52+16,  // writeable
};

char *alt_labels[] = {
    "none",
    "selected",
    "highlight",
    "sel+high"
};

/* Dithering flags */
int dither = DITHER_BACKGROUND;

int main(int argc, char *argv[])
{
  int i;
  int alt;
  int wait_at_end = 1;

  if (argc == 2 && strcmp(argv[1], "-quit")==0)
    wait_at_end = 0;

  printf("Plotting...\n");

  /* We draw each of the buttons, going up the screen, and beside them
     we draw button with the 'selected' bit set, forcing the button to
     be pressed, and then again with the 'deleted' bit set, forcing
     the button to be highlighted. The only buttons this has an effect
     for should be types 5 and 6 (action and default). */

  for (alt=0; alt<4; alt++)
  {
    for (i=1; i<=7; i++)
    {
      /* We set up the environment that the Wimp would give us */
      colours_t cols[6];
      bbox_t fillbox;
      bbox_t box;
      unsigned long flags;

      int selected = (alt & 1);
      int highlighted = (alt & 2);

      cols[COLOUR_FG]  =0x00000000;
      cols[COLOUR_BG]  =(i==7) ? 0xFFFFFF00 : 0xDDDDDD00;
      cols[COLOUR_WELL]=(i==6) ? 0xBAEEEE00 : 0xDDDDDD00;
      cols[COLOUR_FACE]=0xFFFFFF00;
      cols[COLOUR_OPP] =(i==3 || i==4) ? 0xBABABA00 : 0x73737300;
      box.x0=X0 + alt*(WIDTH+32);
      box.y0=Y0+(HEIGHT)*(i-1);
      box.x1=box.x0+WIDTH;
      box.y1=box.y0+heights[i];
      box.dx=2;
      box.dy=2;
      box.dx_1=box.dx-1;
      box.dy_1=box.dy-1;

      fillbox=box;

      /* Grey background to see our buttons against */
      gcol(0xDDDDDD00);
      _swix(OS_Plot,_INR(0,2),4,   box.x0-16,box.y0-16);
      _swix(OS_Plot,_INR(0,2),96+5,box.x1+16,box.y1+16);

      flags = 0;
      if (selected)
        flags |= (1<<21);
      if (highlighted)
        flags |= (1<<23);

      border_colour(i, flags, &fillbox, cols, 0xDDDDDD00);
      _swix(ColourTrans_SetGCOL,_IN(0)|_INR(3,4),
                    cols[COLOUR_BG],
                    (1<<7) | ((dither & DITHER_BACKGROUND) ? (1<<8) : 0),
                    0);
      border_fill(i, flags, &fillbox, cols, dither);
      border_draw(i, flags, &box, cols, dither);
    }

    /* Let's put a label below each of the columns */
    {
        int x0 = X0 + alt*(WIDTH+32);
        int y0 = Y0 - 24 - 32;
        _swix(0x105, 0); /* Text at graphics cursor */
        gcol(0xFFFFFF00); /* White text */

        _swix(OS_Plot,_INR(0,2),4, x0, y0);
        printf("%s", alt_labels[alt]);
        _swix(0x104, 0); /* Text at text cursor */
    }
  }

  if (wait_at_end)
    getc(stdin);

  return 0;
}
